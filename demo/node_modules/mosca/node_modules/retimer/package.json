{
  "name": "retimer",
  "version": "1.0.1",
  "description": "Reschedulable Timer for your node needs",
  "main": "retimer.js",
  "scripts": {
    "lint": "standard",
    "test": "tape test.js | faucet"
  },
  "pre-commit": [
    "lint",
    "test"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mcollina/retimer.git"
  },
  "keywords": [
    "schedulable",
    "reschedulable",
    "timer",
    "setTimeout"
  ],
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mcollina/retimer/issues"
  },
  "homepage": "https://github.com/mcollina/retimer#readme",
  "devDependencies": {
    "fastbench": "^1.0.0",
    "faucet": "0.0.1",
    "pre-commit": "^1.0.10",
    "standard": "^4.5.2",
    "tape": "^4.0.0"
  },
  "readme": "# retimer&nbsp;&nbsp;[![Build Status](https://travis-ci.org/mcollina/retimer.png)](https://travis-ci.org/mcollina/retimer)\n\nreschedulable setTimeout for you node needs. This library is built for\nbuilding a keep alive functionality across a large numbers of\nclients/sockets.\n\nRescheduling a 10000 functions 20 times with an interval of 50ms (see\n`bench.js`), with 100 repetitions:\n\n* `benchSetTimeout*100`: 51867ms\n* `benchRetimer*100`: 34237ms\n\n## Install\n\n```\nnpm install retimer --save\n```\n\n## Example\n\n```js\nvar retimer = require('retimer')\nvar timer = retimer(function () {\n  throw new Error('this should never get called!')\n}, 20)\n\nsetTimeout(function () {\n  timer.reschedule(50)\n  setTimeout(function () {\n    timer.clear()\n  }, 10)\n}, 10)\n```\n\n## API\n\n### retimer(callback, timeout, [...args])\n\nExactly like your beloved `setTimeout`.\nReturns a `Retimer object`\n\n### timer.reschedule(timeout)\n\nReschedule the timer, if the specified timeout comes __after__ the\noriginal timeout.\n\nReturns true if successful, false otherwise\n\n### timer.clear()\n\nClear the timer, like your beloved `clearTimeout`.\n\n## How it works\n\nTimers are stored in a Linked List in node.js, if you create a lot of\ntimers this Linked List becomes massive which makes __removing a timer an expensive operation__.\nRetimer let the old timer run at its time, and schedule a new one accordingly.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "retimer@1.0.1",
  "_shasum": "e6d0040e2ce2f9cc22cfab211e78ade5120c85e9",
  "_from": "retimer@^1.0.1",
  "_resolved": "https://registry.npmjs.org/retimer/-/retimer-1.0.1.tgz"
}
